#!/usr/bin/env perl
#-*-perl-*-
#
# convert between 2-letter and 3-letter language codes
#
# USAGE: ./iso639 [-2|-3|-m] [langcode]*
#
# convert to 3-letter-code if 2-letter code is given and vice versa
# -2 ... print 2-letter code (even if the input is a 2-letter code)
# -3 ... print 3-letter code (even if the input is a 3-letter code)
# -m ... print macro language instead of local language variants
# -n ... don't print a final new-line
# -k ... keep original code if no mapping is found
#

## make this a module
package ISO::639::3;

# use 5.006;
use strict;
use warnings;

use utf8;
use open ':locale';
use vars qw($opt_2 $opt_3 $opt_h $opt_m $opt_n $opt_k);
use Getopt::Std;
use Pod::Usage;

=head1 NAME

ISO::639::3 - Language codes and names from ISO::639

=head1 VERSION

Version 0.03

=cut

our $VERSION      = '0.03';

use Exporter 'import';
our @EXPORT = qw(
    convert_iso639
    get_iso639_1
    get_iso639_3
    get_macro_language
    get_language_name
);
our %EXPORT_TAGS = ( all => \@EXPORT );


=head1 SYNOPSIS

The module provides simple functions for retrieving language names and codes from the ISO-639 standards. The main purpose is to convert between different variants of codes and to get the English names of languages from codes. The module contains basic functions. There is no object-oriented interface. All functions can be exported.

    use ISO::639::3 qw/:all/;

    print convert_iso639( 'iso639-1', 'fra' );
    print convert_iso639( 'iso639-3', 'de' );
    print convert_iso639( 'name', 'fa' );

    print get_iso639_1( 'deu' );
    print get_iso639_3( 'de' );
    print get_language_name( 'de' );
    print get_language_name( 'eng' );
    print get_macro_language( 'yue' );

The module can be run as a script:

  perl ISO/639/3.pm [OPTIONS] LANGCODE*

This converts all language codes given as LANGCODE to corresponding language names. OPTIONS can be set to convert between different variants of language codes or to convert from language names to codes.

=head2 OPTIONS

  -2: convert to two-letter code (ISO 639-1)
  -3: convert to three-letter code (ISO 639-3)
  -m: convert to three-letter code but return the macro-language if available (ISO 639-3)
  -n: don't print a final new line
  -k: keep original code if no mapping is found

=cut

our $TwoToThree   = {};
our $ThreeToTwo   = {};
our $ThreeToThree = {};
our $ThreeToMacro = {};
our $NameToTwo    = {};
our $NameToThree  = {};
our $TwoToName    = {};
our $ThreeToName  = {};

