#!perl
#-*-perl-*-
=head1 NAME

find_script - detect characters from various scripts

=head1 SYNOPSIS

  find_script [OPTIONS] < input.txt > script-codes.txt

Find the script of a text and print the script codes line by line.

=head2 OPTIONS

  -a ............ print all scripts found in each line
  -l <langid> ... language hint (start by looking at language-specific scripts first)
  -L ............ two-column input (langid <TAB> text)
  -n ............ print script names instead of script codes
  -h ............ print usage information
  -r ............ also print region/territory
  -R ............ like -r but print default region if no other region found
  -D ............ surpress default script codes
  -1 ............ also print ISO-639-1 code
  -3 ............ also print ISO-639-3 code

=cut


# use 5.006;
use strict;
use warnings;

use lib 'lib';
use ISO::15924 qw/:all/;
use ISO::639::3 qw/:all/;

use open ':locale';
use vars qw($opt_a $opt_D $opt_h $opt_l $opt_L $opt_n $opt_r $opt_R $opt_1 $opt_3);
use Getopt::Std;
use Pod::Usage;

&getopts('aDhl:LnrR13');

&pod2usage if ($opt_h);

my $DefaultScript = $opt_l ? &default_script($opt_l) || "" : "";
my $DefaultRegion = $opt_l ? &default_territory($opt_l) || 'XX' : 'XX';

while (<>){
    chomp;
    ($opt_l,$_) = split(/\t/) if ($opt_L);
    if ($opt_a){
	my %scripts = script_of_string($_, $opt_l);
	foreach (sort { $scripts{$b} <=> $scripts{$a} } keys %scripts ){
	    if ($opt_n){
		print script_name($_)," ($scripts{$_}) ";
	    }
	    else{
		print "$_ ($scripts{$_}) ";
	    }
	}
	print "\n";
    }
    else{
	my @output = ();
	if ($opt_l){
	    if ($opt_1){ push( @output, &get_iso639_1($opt_l, 1) ); }
	    elsif ($opt_3){ push( @output, &get_iso639_3($opt_l, 1) ); }
	}

	$DefaultScript = &default_script($opt_l) || "" if ($opt_L);
	my $script = &script_of_string($_, $opt_l) || $DefaultScript;
	if ( not ( $opt_D && ($script eq $DefaultScript)) ){
	    if ($opt_n){
		push(@output, script_name($script)) if ($script);
	    }
	    else{
		push(@output, $script) if ($script);
	    }
	}

	$DefaultRegion = &default_territory($opt_l) || "" if ($opt_L);
	my $region = $opt_l && ($opt_r || $opt_R) ? &language_territory($opt_l, $opt_R) : undef;
	if ( not ( $opt_D && (($region eq $DefaultRegion) || ($region eq 'XX'))) ){
	    push(@output, $region) if ($region);
	}

	print join('_', @output),"\n";
    }
}


=head1 ACKNOWLEDGEMENTS



=head1 LICENSE AND COPYRIGHT

 ---------------------------------------------------------------------------
 Copyright (c) 2020 Joerg Tiedemann

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.
 ---------------------------------------------------------------------------

=cut
