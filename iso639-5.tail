#-*-perl-*-

=head1 SUBROUTINES

=head2 @langcodes = language_group( $groupcode )

Returns a list of language codes within the given language group.

=cut


sub language_group{
    my %children = ();
    if (exists $$LanguageGroup{$_[0]}){
	foreach my $l (@{$$LanguageGroup{$_[0]}}){
	    if (exists $$LanguageGroup{$l}){
		foreach (&language_group($l)){
		    $children{$_}++;
		}
	    }
	    else{
		$children{$l}++;
	    }
	}
    }
    else{
	return ($_[0]);
    }
    return sort keys %children;
}


=head2 @langcodes = language_group_children( $groupcode )

Returns a list of language codes that are immediate children of the given language group.

=cut

sub language_group_children{
    if (exists $$LanguageGroup{$_[0]}){
	return @{$$LanguageGroup{$_[0]}};
    }
    print STDERR "unknown language group $_[0]\n" if ($VERBOSE);
    return ();
}


=head2 @parentcode = language_group( $langcode )

Returns the parent language code for the given language.

=cut


sub language_parent{
    if (exists $$LanguageParent{$_[0]}){
	return $$LanguageParent{$_[0]};
    }
    print STDERR "no parent found for '$_[0]'\n" if ($VERBOSE);
    return undef;
}


sub iso2glottolog{
    return $$ISO2Glottolog{$_[0]} if (exists $$ISO2Glottolog{$_[0]});
    print STDERR "no glottolog ID found for '$_[0]'\n" if ($VERBOSE);
    return undef;
}

sub glottolog2iso{
    return $$Glottolog2ISO{$_[0]} if (exists $$Glottolog2ISO{$_[0]});
    print STDERR "no ISO639-5 code found for '$_[0]'\n" if ($VERBOSE);
    return undef;
}


## don't need the functions below, just use ISO::639::3
##

# =head2 $name = language_group_name( $groupcode )

# Returns the name of the language group

# =cut


# sub language_group_name{
#     return ISO::639::3::get_language_name($_[0]);
# }


# =head2 $code = language_group_code( $groupname )

# Returns the name of the language group

# =cut


# sub language_group_name{
#     return ISO::639::3::get_iso639_3($_[0]);
# }



1;

